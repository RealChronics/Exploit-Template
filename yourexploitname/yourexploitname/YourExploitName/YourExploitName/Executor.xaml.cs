using ICSharpCode.AvalonEdit.Highlighting;
using ICSharpCode.AvalonEdit.Highlighting.Xshd;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;
using System.Xml;
using System.Diagnostics;
using System.Windows.Media.Animation;
using System.Windows.Threading;
using Microsoft.Win32;
using D4rkAPI;
using System.Threading;
using System.Net;

namespace YourExploitName
{
    /// <summary>
    /// Interaction logic for Executor.xaml
    /// </summary>
    public partial class Executor : Window
    {


        Storyboard StoryBoard = new Storyboard();
        TimeSpan duration = TimeSpan.FromMilliseconds(500);
        TimeSpan duration2 = TimeSpan.FromMilliseconds(1000);





        private IEasingFunction Smooth
        {
            get;
            set;
        }
       = new QuarticEase
       {
           EasingMode = EasingMode.EaseInOut
       };

        public void Fade(DependencyObject Object)
        {
            DoubleAnimation FadeIn = new DoubleAnimation()
            {
                From = 0.0,
                To = 1.0,
                Duration = new Duration(duration),
            };
            Storyboard.SetTarget(FadeIn, Object);
            Storyboard.SetTargetProperty(FadeIn, new PropertyPath("Opacity", 1));
            StoryBoard.Children.Add(FadeIn);
            StoryBoard.Begin();
        }


        public void FadeOut(DependencyObject Object)
        {
            DoubleAnimation Fade = new DoubleAnimation()
            {
                From = 1.0,
                To = 0.0,
                Duration = new Duration(duration),
            };
            Storyboard.SetTarget(Fade, Object);
            Storyboard.SetTargetProperty(Fade, new PropertyPath("Opacity", 1));
            StoryBoard.Children.Add(Fade);
            StoryBoard.Begin();
        }

        public void ObjectShift(DependencyObject Object, Thickness Get, Thickness Set)
        {
            ThicknessAnimation Animation = new ThicknessAnimation()
            {
                From = Get,
                To = Set,
                Duration = duration2,
                EasingFunction = Smooth,
            };
            Storyboard.SetTarget(Animation, Object);
            Storyboard.SetTargetProperty(Animation, new PropertyPath(MarginProperty));
            StoryBoard.Children.Add(Animation);
            StoryBoard.Begin();
        }


        
            public void ReloadScripts()
        {
            this.List.Items.Clear();
            foreach (FileInfo fileInfo in new DirectoryInfo("./Scripts").GetFiles("*.txt"))
            {
                this.List.Items.Add(fileInfo.Name);
            }
            foreach (FileInfo fileInfo2 in new DirectoryInfo("./Scripts").GetFiles("*.lua"))
            {
                this.List.Items.Add(fileInfo2.Name);
            }
        }

        FileSystemWatcher files = new FileSystemWatcher();
        public Executor()
        {
            InitializeComponent();

            Settings.Visibility = Visibility.Hidden;

            Stream stream = File.OpenRead("./bin/lua.xshd");
            XmlTextReader reader = new XmlTextReader(stream);
            AvalonEditor.SyntaxHighlighting = HighlightingLoader.Load(reader, HighlightingManager.Instance);

            Stream xshd_stream = File.OpenRead(Environment.CurrentDirectory + @"\bin\" + "Lua.xshd");
            XmlTextReader xshd_reader = new XmlTextReader(xshd_stream);
            AvalonEditor.SyntaxHighlighting = HighlightingLoader.Load(xshd_reader, HighlightingManager.Instance);

            xshd_reader.Close();
            xshd_stream.Close();
            this.EditTabs.Loaded += delegate (object source, RoutedEventArgs e)
            {
                this.EditTabs.GetTemplateItem<Button>("AddTabButton").Click += delegate (object s, RoutedEventArgs f)
                {
                    this.MakeTab("", "New Tab");
                };

                TabItem ti = EditTabs.SelectedItem as TabItem;
                ti.GetTemplateItem<Button>("CloseButton").Visibility = Visibility.Hidden;
                ti.GetTemplateItem<Button>("CloseButton").Width = 0;
                ti.Header = "Main Tab";

                this.tabScroller = this.EditTabs.GetTemplateItem<ScrollViewer>("TabScrollViewer");
            };
        }
        D4rkAPI.D4rk daddy = new D4rkAPI.D4rk();

        private void Button_Click(object sender, RoutedEventArgs e)
        {
            Environment.Exit(0);
        }

        private void Button_Click_1(object sender, RoutedEventArgs e)
        {
            WindowState = WindowState.Minimized;
        }

        private void Grid_Loaded(object sender, RoutedEventArgs e)
        {
            gamehub.Visibility = Visibility.Hidden;
            mhm.Visibility = Visibility.Hidden;

            this.List.Items.Clear();
            foreach (FileInfo fileInfo in new DirectoryInfo("./Scripts").GetFiles("*.txt"))
            {
                this.List.Items.Add(fileInfo.Name);
            }
            foreach (FileInfo fileInfo2 in new DirectoryInfo("./Scripts").GetFiles("*.lua"))
            {
                this.List.Items.Add(fileInfo2.Name);
            }

            Settings.Visibility = Visibility.Hidden;
            
        }

        private void List_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
           
            bool flag = this.List.SelectedIndex != -1;//So if have 1 item you can click it lol
            if (flag)
            {
                AvalonEditor.Text = File.ReadAllText("scripts\\" + this.List.SelectedItem.ToString());
            }
        }

        private void Button_Click_2(object sender, RoutedEventArgs e)
        {
            OpenFileDialog openFileDialog1 = new OpenFileDialog();
            if (openFileDialog1.ShowDialog() == true)
            {
                openFileDialog1.Title = "Open";
                GetCurrent().Text = File.ReadAllText(openFileDialog1.FileName);
            }
        }

        private void Button_Click_3(object sender, RoutedEventArgs e)
        {
            SaveFileDialog saveFileDialog1 = new SaveFileDialog();
            saveFileDialog1.Filter = "Text Files|*.txt";
            if (saveFileDialog1.ShowDialog() == true)
            {
                using (Stream s = File.Open(saveFileDialog1.FileName, FileMode.CreateNew))
                using (StreamWriter sw = new StreamWriter(s))
                {
                    sw.Write(GetCurrent().Text);
                }
            }
        }

        private void Button_Click_4(object sender, RoutedEventArgs e)
        {
            GetCurrent().Text = "";
        }

        private void Grid_MouseDown(object sender, MouseButtonEventArgs e)
        {
            this.DragMove();
        }

        private void Border_Loaded(object sender, RoutedEventArgs e)
        {

        }

        private void Button_Click_5(object sender, RoutedEventArgs e)
        {
            daddy.Inject();

            Thread.Sleep(2000);

            Thread.Sleep(2000);
            DirectoryInfo d = new DirectoryInfo(Directory.GetCurrentDirectory() + "\\autoexec");
            FileInfo[] TXTFiles = d.GetFiles("*.txt");
            foreach (FileInfo file in TXTFiles)
            {
                daddy.Execute(File.ReadAllText($"./autoexec/{file.Name}"));
            }
            FileInfo[] LUAFiles = d.GetFiles("*.lua");
            foreach (FileInfo file in LUAFiles)
            {
                daddy.Execute(File.ReadAllText($"./autoexec/{file.Name}"));
            }
        }

        private void Button_Click_6(object sender, RoutedEventArgs e)
        {
            daddy.Execute(GetCurrent().Text);
        }

        private void Button_Click_7(object sender, RoutedEventArgs e)
        {

        }

        private void Button_Click_8(object sender, RoutedEventArgs e)
        {

        }

        private void Button_Click_9(object sender, RoutedEventArgs e)
        {
           
        }

        private async void Button_Click_10(object sender, RoutedEventArgs e)
        {
            if(Settings.Visibility == Visibility.Hidden)
            {
                Settings.Visibility = Visibility.Visible;
                await Task.Delay(450);
                ObjectShift(Settings, Settings.Margin, new Thickness(651, -245, 0, 0));
                ObjectShift(TopBord, TopBord.Margin, new Thickness(651, 90, 0, 0));
            }
            else
            {
                ObjectShift(Settings, Settings.Margin, new Thickness(651, 453, 0, -320));
                ObjectShift(TopBord, TopBord.Margin, new Thickness(651, -50, 0, 0));
                await Task.Delay(450);
                Settings.Visibility = Visibility.Hidden;
            }
        }

        private void CheckBox_Checked(object sender, RoutedEventArgs e)
        {
            this.Topmost = true;
        }

        private void CheckBox_Unloaded(object sender, RoutedEventArgs e)
        {
            this.Topmost = false;
        }

        private void CheckBox_Checked_1(object sender, RoutedEventArgs e)
        {
            this.Opacity = .5;
        }

        private void CheckBox_Unchecked(object sender, RoutedEventArgs e)
        {
            this.Opacity = 1;
        }

        private void Button_Click_11(object sender, RoutedEventArgs e)
        {
            Process.Start("YOUR LINK HERE");
        }

        private void Button_Click_12(object sender, RoutedEventArgs e)
        {
            Process.Start("rbxfpsunlocker");
        }

        private void Button_Click_13(object sender, RoutedEventArgs e)
        {
            Process[] roblox = Process.GetProcesses();
            foreach (Process openedroblox in roblox)
            {
                bool flag = openedroblox.ProcessName == "RobloxPlayerBeta";
                if (flag)
                {
                    openedroblox.Kill();
                    {

                    }
                }

            }



        }

       

        private async void Button_Click_15(object sender, RoutedEventArgs e)
        {
            if (gamehub.Visibility == Visibility.Hidden)
            {
                mhm.Visibility = Visibility.Visible;
                gamehub.Visibility = Visibility.Visible;
                await Task.Delay(800);
                ObjectShift(gamehub, Settings.Margin, new Thickness(141, 142, 0, 0));
                ObjectShift(mhm, Settings.Margin, new Thickness(141, 142, 174, 64));
            }
            else
            {
                ObjectShift(gamehub, Settings.Margin, new Thickness(-481, 159, 0, 0));
                ObjectShift(mhm, Settings.Margin, new Thickness(-481, 162, 796, 46));
                await Task.Delay(450);
                gamehub.Visibility = Visibility.Hidden;
                mhm.Visibility = Visibility.Hidden;
            }
        }

        private void CheckBox_Checked_2(object sender, RoutedEventArgs e)
        {
            DispatcherTimer timer = new DispatcherTimer();

            timer.Tick += this.AutoAttach;

            timer.Start();
        }


        private async void AutoAttach(object sender, EventArgs e)

        {

            if (AutoIn.IsChecked == true)
            {
                await Task.Delay(1000);
                Process[] rbxProcess = Process.GetProcessesByName("RobloxPlayerBeta");
                if (rbxProcess.Length == 1)
                {
                    {
                        await Task.Delay(1500);
                        try
                        {
                            daddy.Inject();
                        }
                        catch { };
                    }
                }
            }
        }

        private void Button_ContextMenuClosing(object sender, ContextMenuEventArgs e)
        {

        }

        private ScrollViewer tabScroller;
        private void ScrollTabs(object sender, MouseWheelEventArgs e)
        {

            this.tabScroller.ScrollToHorizontalOffset(this.tabScroller.HorizontalOffset + (double)(e.Delta / 10));
        }
        private void MoveTab(object sender, MouseEventArgs e)
        {
            TabItem tabItem = e.Source as TabItem;
            if (tabItem == null)
            {
                return;
            }
            if (Mouse.PrimaryDevice.LeftButton == MouseButtonState.Pressed)
            {
                if (VisualTreeHelper.HitTest(tabItem, Mouse.GetPosition(tabItem)).VisualHit is Button)
                {
                    return;
                }
                DragDrop.DoDragDrop(tabItem, tabItem, DragDropEffects.Move);
            }
        }
        private ICSharpCode.AvalonEdit.TextEditor current;

        public ICSharpCode.AvalonEdit.TextEditor GetCurrent()
        {
            if (this.EditTabs.Items.Count == 0)
            {
                return AvalonEditor;
            }
            else
            {
                return this.current = (this.EditTabs.SelectedContent as ICSharpCode.AvalonEdit.TextEditor);
            }
        }





        public ICSharpCode.AvalonEdit.TextEditor MakeEditor()
        {
            ICSharpCode.AvalonEdit.TextEditor textEditor = new ICSharpCode.AvalonEdit.TextEditor
            {
                ShowLineNumbers = true,
                Background = new SolidColorBrush(System.Windows.Media.Color.FromRgb(22, 22, 22)),
                Foreground = new SolidColorBrush((System.Windows.Media.Color.FromRgb(255, 255, 255))),
                Margin = new Thickness(2, 5, 7, -11),
                FontFamily = new System.Windows.Media.FontFamily("Consolas"),
                Style = (this.TryFindResource("TextEditorStyle1") as Style),
                HorizontalScrollBarVisibility = ScrollBarVisibility.Visible,
                VerticalScrollBarVisibility = ScrollBarVisibility.Visible
            };
            textEditor.Options.EnableEmailHyperlinks = false;
            textEditor.Options.EnableHyperlinks = false;
            textEditor.Options.AllowScrollBelowDocument = true;
            Stream xshd_stream = File.OpenRead(Environment.CurrentDirectory + @"\bin\" + "lua.xshd");
            XmlTextReader xshd_reader = new XmlTextReader(xshd_stream);
            textEditor.SyntaxHighlighting = HighlightingLoader.Load(xshd_reader, HighlightingManager.Instance);

            xshd_reader.Close();
            xshd_stream.Close();
            return textEditor;
        }
        public TabItem MakeTab(string text = "", string title = "Tab")
        {
            title = title + "";
            bool loaded = false;
            ICSharpCode.AvalonEdit.TextEditor textEditor = MakeEditor();
            textEditor.Text = text;
            TabItem tab = new TabItem
            {
                Content = textEditor,
                Style = (base.TryFindResource("Tab") as Style),
                AllowDrop = true,
                Header = title
            };
            tab.MouseWheel += this.ScrollTabs;
            tab.Loaded += delegate (object source, RoutedEventArgs e)
            {
                if (loaded)
                {
                    return;
                }
                this.tabScroller.ScrollToRightEnd();
                loaded = true;
            };
            tab.MouseDown += delegate (object sender, MouseButtonEventArgs e)
            {
                if (e.OriginalSource is Border)
                {
                    if (e.MiddleButton == MouseButtonState.Pressed)
                    {
                        this.EditTabs.Items.Remove(tab);
                        return;
                    }
                }
            };
            tab.Loaded += delegate (object s, RoutedEventArgs e)
            {
                tab.GetTemplateItem<Button>("CloseButton").Click += delegate (object r, RoutedEventArgs f)
                {
                    this.EditTabs.Items.Remove(tab);
                };

                this.tabScroller.ScrollToRightEnd();
                loaded = true;
            };

            tab.MouseMove += this.MoveTab;
            tab.Drop += this.DropTab;
            string oldHeader = title;
            this.EditTabs.SelectedIndex = this.EditTabs.Items.Add(tab);
            return tab;
        }
        private void Rectangle_MouseLeftButtonDown(object sender, MouseButtonEventArgs e)
        {
            this.DragMove();
        }
        private void Ellipse_MouseLeftButtonDown(object sender, MouseButtonEventArgs e)
        {
            this.Close();
        }
        private void EditTabs_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {

        }

        private void DropTab(object sender, DragEventArgs e)
        {
            TabItem tabItem = e.Source as TabItem;
            if (tabItem != null)
            {
                TabItem tabItem2 = e.Data.GetData(typeof(TabItem)) as TabItem;
                if (tabItem2 != null)
                {
                    if (!tabItem.Equals(tabItem2))
                    {
                        TabControl tabControl = tabItem.Parent as TabControl;
                        int insertIndex = tabControl.Items.IndexOf(tabItem2);
                        int num = tabControl.Items.IndexOf(tabItem);
                        tabControl.Items.Remove(tabItem2);
                        tabControl.Items.Insert(num, tabItem2);
                        tabControl.Items.Remove(tabItem);
                        tabControl.Items.Insert(insertIndex, tabItem);
                        tabControl.SelectedIndex = num;
                    }
                    return;
                }
            }
        }

        private void TextBox_TextChanged(object sender, TextChangedEventArgs e)
        {
            
            var view = CollectionViewSource.GetDefaultView(List.Items);
            if (view != null)
                view.Filter = (o) => { return o.ToString().ToLower().Contains(Search.Text.ToLower()) ; };


        }

        private void Image_MouseDown(object sender, MouseButtonEventArgs e)
        {
            WebClient wb = new WebClient();
            string Script = wb.DownloadString("https://pastebin.com/raw/MCcuvyZw");
            daddy.Execute(Script);
        }
    }
}
